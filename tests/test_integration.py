#!/usr/bin/env python3
"""
üß™ Tests d'Int√©gration - Web3 Opportunities Tracker
=================================================
Tests end-to-end du pipeline complet selon le plan du Jour 11
"""

import unittest
import json
import os
import sys
import time
import asyncio
from datetime import datetime, timedelta
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent.parent))

# Imports des modules du projet
try:
    from telegram_bot import TelegramBot
    from telegram_scheduler import TelegramScheduler
    from telegram_bot_interactive import InteractiveTelegramBot
    import pandas as pd
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

class TestIntegration(unittest.TestCase):
    """Tests d'int√©gration pour le pipeline complet"""
    
    def setUp(self):
        """Configuration des tests"""
        self.bot_token = "8063978631:AAGrnjyRaa3MounLsIkJu_Cglaa80NTYoaI"
        self.chat_id = "7886553560"
        self.test_data_dir = Path("data")
        self.test_data_dir.mkdir(exist_ok=True)
        
    def test_end_to_end_pipeline(self):
        """Test 1: Pipeline complet de bout en bout"""
        print("üîÑ Test 1: Pipeline end-to-end...")
        
        try:
            # 1. Initialiser le bot
            bot = TelegramBot(self.bot_token, self.chat_id)
            
            # 2. Charger les donn√©es
            df = bot.load_opportunities_data()
            
            # 3. V√©rifications de base
            self.assertGreater(len(df), 10, "Au moins 10 opportunit√©s doivent √™tre charg√©es")
            self.assertIn('roi', df.columns, "Colonne ROI doit exister")
            self.assertIn('source', df.columns, "Colonne source doit exister")
            self.assertIn('title', df.columns, "Colonne title doit exister")
            
            # 4. Filtrage des opportunit√©s
            filtered_opps = bot.filter_opportunities(df)
            
            # 5. V√©rifications du filtrage
            self.assertIsInstance(filtered_opps, dict, "Le filtrage doit retourner un dictionnaire")
            self.assertIn('total', filtered_opps, "Le r√©sultat doit contenir 'total'")
            self.assertIn('high', filtered_opps, "Le r√©sultat doit contenir 'high'")
            self.assertIn('medium', filtered_opps, "Le r√©sultat doit contenir 'medium'")
            self.assertIn('avg_roi', filtered_opps, "Le r√©sultat doit contenir 'avg_roi'")
            
            # 6. Formatage du message
            message = bot.format_notification_message(filtered_opps)
            self.assertIsInstance(message, str, "Le message doit √™tre une string")
            self.assertGreater(len(message), 50, "Le message doit contenir du contenu")
            
            print(f"‚úÖ Test 1 r√©ussi - {len(df)} opportunit√©s, {filtered_opps['total']} filtr√©es")
            
        except Exception as e:
            self.fail(f"√âchec du test end-to-end: {e}")

    def test_data_quality(self):
        """Test 2: Qualit√© des donn√©es"""
        print("üîÑ Test 2: Qualit√© des donn√©es...")
        
        try:
            bot = TelegramBot(self.bot_token, self.chat_id)
            df = bot.load_opportunities_data()
            
            # V√©rifier le format des donn√©es
            required_columns = ['title', 'roi', 'source', 'url', 'timestamp']
            for col in required_columns:
                self.assertIn(col, df.columns, f"Colonne {col} requise")
            
            # V√©rifier les types de donn√©es
            self.assertTrue(df['roi'].dtype in ['float64', 'int64'], "ROI doit √™tre num√©rique")
            
            # V√©rifier les valeurs ROI valides
            invalid_roi = df[df['roi'] < 0]
            self.assertEqual(len(invalid_roi), 0, "Aucun ROI n√©gatif autoris√©")
            
            # V√©rifier l'absence de doublons (bas√© sur title + source)
            duplicates = df.duplicated(subset=['title', 'source'], keep=False)
            duplicate_count = duplicates.sum()
            
            # V√©rifier les URLs valides
            invalid_urls = df[~df['url'].str.startswith('http')]
            self.assertLessEqual(len(invalid_urls), len(df) * 0.1, "Maximum 10% d'URLs invalides autoris√©")
            
            # V√©rifier les sources connues
            known_sources = ['Zealy', 'Galxe', 'Layer3', 'TwitterRSS', 'AirdropsFallback', 'Layer3-LiFi', 'Unknown']
            unknown_sources = df[~df['source'].isin(known_sources)]
            
            print(f"‚úÖ Test 2 r√©ussi - Qualit√© OK, {duplicate_count} doublons, {len(unknown_sources)} sources inconnues")
            
        except Exception as e:
            self.fail(f"√âchec test qualit√© donn√©es: {e}")

    def test_telegram_bot_functionality(self):
        """Test 3: Fonctionnalit√©s du bot Telegram"""
        print("üîÑ Test 3: Fonctionnalit√©s bot Telegram...")
        
        try:
            bot = TelegramBot(self.bot_token, self.chat_id)
            
            # Test de g√©n√©ration de donn√©es mock
            mock_data = bot.generate_mock_data()
            self.assertEqual(len(mock_data), 20, "20 donn√©es mock doivent √™tre g√©n√©r√©es")
            
            # Test du filtrage avec donn√©es mock
            df_mock = pd.DataFrame(mock_data)
            filtered_mock = bot.filter_opportunities(df_mock)
            self.assertIsInstance(filtered_mock, dict)
            
            # Test du formatage de message
            message = bot.format_notification_message(filtered_mock)
            required_elements = ['Web3 Opportunities', 'ROI', 'Dashboard']
            for element in required_elements:
                self.assertIn(element.lower(), message.lower(), f"√âl√©ment '{element}' manquant")
                
            print("‚úÖ Test 3 r√©ussi - Fonctionnalit√©s bot OK")
            
        except Exception as e:
            self.fail(f"√âchec test bot Telegram: {e}")

    def test_scheduler_functionality(self):
        """Test 4: Fonctionnalit√©s du scheduler"""
        print("üîÑ Test 4: Fonctionnalit√©s scheduler...")
        
        try:
            scheduler = TelegramScheduler(self.bot_token, self.chat_id, interval_hours=1)
            
            # Test d'initialisation
            self.assertEqual(scheduler.interval_hours, 1)
            self.assertEqual(scheduler.notification_count, 0)
            self.assertEqual(scheduler.error_count, 0)
            self.assertFalse(scheduler.is_running)
            
            # Test du calcul de prochaine notification
            next_notification = scheduler.calculate_next_notification_time()
            now = datetime.now()
            expected_time = (now + timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)
            
            time_diff = abs((next_notification - expected_time).total_seconds())
            self.assertLess(time_diff, 60, "Calcul prochaine notification doit √™tre pr√©cis")
            
            print("‚úÖ Test 4 r√©ussi - Scheduler OK")
            
        except Exception as e:
            self.fail(f"√âchec test scheduler: {e}")

    def test_interactive_bot_structure(self):
        """Test 5: Structure du bot interactif"""
        print("üîÑ Test 5: Structure bot interactif...")
        
        try:
            interactive_bot = InteractiveTelegramBot(self.bot_token, self.chat_id)
            
            # V√©rifier que les m√©thodes essentielles existent
            essential_methods = [
                'start_command', 'button_callback', 'show_stats', 
                'show_top_roi', 'show_sources', 'show_settings'
            ]
            
            for method in essential_methods:
                self.assertTrue(hasattr(interactive_bot, method), f"M√©thode {method} manquante")
                self.assertTrue(callable(getattr(interactive_bot, method)), f"M√©thode {method} non appelable")
            
            print("‚úÖ Test 5 r√©ussi - Bot interactif OK")
            
        except Exception as e:
            self.fail(f"√âchec test bot interactif: {e}")

    def test_data_persistence(self):
        """Test 6: Persistance des donn√©es"""
        print("üîÑ Test 6: Persistance des donn√©es...")
        
        try:
            bot = TelegramBot(self.bot_token, self.chat_id)
            
            # Chargement initial
            df1 = bot.load_opportunities_data()
            count1 = len(df1)
            
            # Attendre un peu et recharger
            time.sleep(1)
            df2 = bot.load_opportunities_data()
            count2 = len(df2)
            
            # Les donn√©es doivent √™tre coh√©rentes
            self.assertEqual(count1, count2, "Les donn√©es doivent √™tre persistantes")
            
            # V√©rifier la structure coh√©rente
            self.assertEqual(list(df1.columns), list(df2.columns), "Structure des colonnes doit √™tre stable")
            
            print(f"‚úÖ Test 6 r√©ussi - Persistance OK ({count1} opportunit√©s)")
            
        except Exception as e:
            self.fail(f"√âchec test persistance: {e}")

    def test_error_handling(self):
        """Test 7: Gestion d'erreurs"""
        print("üîÑ Test 7: Gestion d'erreurs...")
        
        try:
            # Test avec token invalide
            invalid_bot = TelegramBot("invalid_token", self.chat_id)
            
            # Le chargement de donn√©es doit continuer √† fonctionner m√™me avec un token invalide
            df = invalid_bot.load_opportunities_data()
            self.assertGreater(len(df), 0, "Donn√©es mock doivent √™tre utilis√©es si pas de vraies donn√©es")
            
            # Test de filtrage avec DataFrame vide
            empty_df = pd.DataFrame()
            filtered_empty = invalid_bot.filter_opportunities(empty_df)
            self.assertEqual(filtered_empty['total'], 0, "Filtrage DataFrame vide doit retourner 0")
            
            print("‚úÖ Test 7 r√©ussi - Gestion d'erreurs OK")
            
        except Exception as e:
            self.fail(f"√âchec test gestion erreurs: {e}")

class TestPerformance(unittest.TestCase):
    """Tests de performance pour le syst√®me"""
    
    def setUp(self):
        """Configuration des tests de performance"""
        self.bot_token = "8063978631:AAGrnjyRaa3MounLsIkJu_Cglaa80NTYoaI"
        self.chat_id = "7886553560"
        
    def test_data_loading_performance(self):
        """Test 8: Performance du chargement de donn√©es"""
        print("üîÑ Test 8: Performance chargement...")
        
        try:
            bot = TelegramBot(self.bot_token, self.chat_id)
            
            # Mesurer le temps de chargement
            start_time = time.time()
            df = bot.load_opportunities_data()
            loading_time = time.time() - start_time
            
            # V√©rifier que le chargement est rapide
            self.assertLess(loading_time, 5.0, f"Chargement trop lent: {loading_time:.2f}s")
            
            # Mesurer le filtrage
            start_time = time.time()
            filtered = bot.filter_opportunities(df)
            filtering_time = time.time() - start_time
            
            self.assertLess(filtering_time, 2.0, f"Filtrage trop lent: {filtering_time:.2f}s")
            
            print(f"‚úÖ Test 8 r√©ussi - Chargement: {loading_time:.2f}s, Filtrage: {filtering_time:.2f}s")
            
        except Exception as e:
            self.fail(f"√âchec test performance: {e}")

    def test_message_formatting_performance(self):
        """Test 9: Performance du formatage des messages"""
        print("üîÑ Test 9: Performance formatage...")
        
        try:
            bot = TelegramBot(self.bot_token, self.chat_id)
            df = bot.load_opportunities_data()
            filtered = bot.filter_opportunities(df)
            
            # Mesurer le formatage
            start_time = time.time()
            message = bot.format_notification_message(filtered)
            formatting_time = time.time() - start_time
            
            self.assertLess(formatting_time, 1.0, f"Formatage trop lent: {formatting_time:.2f}s")
            self.assertGreater(len(message), 50, "Message doit avoir du contenu")
            
            print(f"‚úÖ Test 9 r√©ussi - Formatage: {formatting_time:.3f}s, Taille: {len(message)} caract√®res")
            
        except Exception as e:
            self.fail(f"√âchec test performance formatage: {e}")

def run_integration_tests():
    """Lance tous les tests d'int√©gration"""
    print("üß™ TESTS D'INT√âGRATION - Web3 Opportunities Tracker")
    print("=" * 60)
    print()
    
    # Configuration du test runner
    suite = unittest.TestSuite()
    
    # Tests d'int√©gration
    suite.addTest(TestIntegration('test_end_to_end_pipeline'))
    suite.addTest(TestIntegration('test_data_quality'))
    suite.addTest(TestIntegration('test_telegram_bot_functionality'))
    suite.addTest(TestIntegration('test_scheduler_functionality'))
    suite.addTest(TestIntegration('test_interactive_bot_structure'))
    suite.addTest(TestIntegration('test_data_persistence'))
    suite.addTest(TestIntegration('test_error_handling'))
    
    # Tests de performance
    suite.addTest(TestPerformance('test_data_loading_performance'))
    suite.addTest(TestPerformance('test_message_formatting_performance'))
    
    # Ex√©cution des tests
    runner = unittest.TextTestRunner(verbosity=1)
    start_time = time.time()
    result = runner.run(suite)
    total_time = time.time() - start_time
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS D'INT√âGRATION")
    print("=" * 60)
    
    total_tests = result.testsRun
    failed_tests = len(result.failures) + len(result.errors)
    passed_tests = total_tests - failed_tests
    
    print(f"‚úÖ Tests r√©ussis: {passed_tests}/{total_tests}")
    print(f"‚ùå Tests √©chou√©s: {failed_tests}/{total_tests}")
    print(f"‚è±Ô∏è Temps total: {total_time:.2f} secondes")
    print(f"‚ö° Performance: {total_tests/total_time:.1f} tests/seconde")
    
    if failed_tests == 0:
        print("\nüéâ TOUS LES TESTS D'INT√âGRATION SONT PASS√âS!")
        print("‚úÖ Le pipeline end-to-end est valid√©")
        return True
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("‚ùå V√©rifiez les erreurs ci-dessus")
        return False

if __name__ == "__main__":
    try:
        success = run_integration_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüõë Tests interrompus par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur critique lors des tests: {e}")
        sys.exit(1)
