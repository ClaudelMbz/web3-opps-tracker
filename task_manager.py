#!/usr/bin/env python3
"""
Task Manager - Syst√®me automatis√© de gestion des t√¢ches quotidiennes
================================================================

Ce script automatise compl√®tement le processus de d√©veloppement en :
1. Lisant le statut actuel depuis status.md
2. Validant que la t√¢che courante est termin√©e
3. Identifiant et ex√©cutant les t√¢ches du jour suivant
4. Mettant √† jour le statut et effectuant les commits Git
5. Garantissant la coh√©rence et la progression continue du projet

Usage: python task_manager.py [--dry-run] [--verbose]
"""

import os
import re
import sys
import json
import logging
import argparse
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass, asdict

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('task_manager.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class TaskStatus:
    """Structure pour le statut d'une t√¢che"""
    day: int
    date: str
    title: str
    completed: bool
    completion_time: Optional[str] = None
    validation_status: Optional[str] = None
    notes: Optional[str] = None

@dataclass
class ProjectStatus:
    """Structure pour le statut global du projet"""
    current_day: int
    total_days: int
    project_start_date: str
    last_updated: str
    current_phase: str
    completion_percentage: float
    tasks_completed: int
    tasks_remaining: int

class TaskManager:
    """Gestionnaire automatis√© des t√¢ches quotidiennes"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.status_file = self.project_root / "status.md"
        self.journal_file = self.project_root / "task_journal.md"
        self.roadmap_file = self.project_root / "roadmap.md"
        self.execution_log = self.project_root / "execution_log.json"
        
        # Patterns pour le parsing des fichiers
        self.status_patterns = {
            'current_day': r'Jour actuel\s*:\s*(\d+)',
            'completion_percentage': r'Avancement\s*:\s*(\d+(?:\.\d+)?)%',
            'current_phase': r'Phase actuelle\s*:\s*(.+)',
            'last_updated': r'Derni√®re mise √† jour\s*:\s*(.+)'
        }
        
        self.journal_patterns = {
            'day_header': r'^## Jour (\d+) - (.+)$',
            'task_item': r'^- \[([ x])\] (.+)$',
            'completion_marker': r'‚úÖ Termin√© le (.+)',
            'validation_marker': r'üîç Valid√© le (.+)'
        }
    
    def load_current_status(self) -> ProjectStatus:
        """Charge le statut actuel depuis status.md"""
        logger.info("Chargement du statut actuel...")
        
        if not self.status_file.exists():
            raise FileNotFoundError(f"Fichier status.md introuvable: {self.status_file}")
        
        content = self.status_file.read_text(encoding='utf-8')
        
        # Extraction des informations cl√©s
        current_day = self._extract_pattern(content, self.status_patterns['current_day'], int, 1)
        completion_percentage = self._extract_pattern(content, self.status_patterns['completion_percentage'], float, 0.0)
        current_phase = self._extract_pattern(content, self.status_patterns['current_phase'], str, "Configuration initiale")
        last_updated = self._extract_pattern(content, self.status_patterns['last_updated'], str, "Non d√©fini")
        
        # Calcul des m√©triques d√©riv√©es
        total_days = 23  # Selon la roadmap
        tasks_completed = current_day - 1 if current_day > 1 else 0
        tasks_remaining = total_days - tasks_completed
        
        status = ProjectStatus(
            current_day=current_day,
            total_days=total_days,
            project_start_date="2025-01-02",  # Valeur par d√©faut
            last_updated=last_updated,
            current_phase=current_phase,
            completion_percentage=completion_percentage,
            tasks_completed=tasks_completed,
            tasks_remaining=tasks_remaining
        )
        
        logger.info(f"Statut charg√©: Jour {status.current_day}/{status.total_days} ({status.completion_percentage}%)")
        return status
    
    def validate_current_day_completion(self, current_day: int) -> Tuple[bool, str]:
        """Valide que les t√¢ches du jour courant sont termin√©es"""
        logger.info(f"Validation des t√¢ches du jour {current_day}...")
        
        if not self.journal_file.exists():
            return False, f"Fichier journal introuvable: {self.journal_file}"
        
        content = self.journal_file.read_text(encoding='utf-8')
        day_tasks = self._extract_day_tasks(content, current_day)
        
        if not day_tasks:
            return False, f"Aucune t√¢che trouv√©e pour le jour {current_day}"
        
        incomplete_tasks = [task for task in day_tasks if not task.completed]
        
        if incomplete_tasks:
            incomplete_list = "\n".join([f"  - {task.title}" for task in incomplete_tasks])
            return False, f"T√¢ches incompl√®tes pour le jour {current_day}:\n{incomplete_list}"
        
        logger.info(f"‚úÖ Toutes les t√¢ches du jour {current_day} sont termin√©es")
        return True, f"Toutes les {len(day_tasks)} t√¢ches du jour {current_day} sont termin√©es"
    
    def get_next_day_tasks(self, next_day: int) -> List[TaskStatus]:
        """R√©cup√®re les t√¢ches du jour suivant"""
        logger.info(f"R√©cup√©ration des t√¢ches du jour {next_day}...")
        
        if not self.journal_file.exists():
            raise FileNotFoundError(f"Fichier journal introuvable: {self.journal_file}")
        
        content = self.journal_file.read_text(encoding='utf-8')
        tasks = self._extract_day_tasks(content, next_day)
        
        if not tasks:
            raise ValueError(f"Aucune t√¢che trouv√©e pour le jour {next_day}")
        
        logger.info(f"üìã {len(tasks)} t√¢ches trouv√©es pour le jour {next_day}")
        return tasks
    
    def execute_day_tasks(self, day: int, tasks: List[TaskStatus], dry_run: bool = False) -> Tuple[bool, List[str]]:
        """Ex√©cute toutes les t√¢ches d'un jour donn√©"""
        logger.info(f"{'[DRY RUN] ' if dry_run else ''}Ex√©cution des t√¢ches du jour {day}...")
        
        execution_results = []
        all_successful = True
        
        for i, task in enumerate(tasks, 1):
            logger.info(f"{'[DRY RUN] ' if dry_run else ''}T√¢che {i}/{len(tasks)}: {task.title}")
            
            try:
                if not dry_run:
                    success, result = self._execute_single_task(task, day)
                    if success:
                        execution_results.append(f"‚úÖ {task.title}: {result}")
                        logger.info(f"‚úÖ T√¢che r√©ussie: {task.title}")
                    else:
                        execution_results.append(f"‚ùå {task.title}: {result}")
                        logger.error(f"‚ùå √âchec t√¢che: {task.title} - {result}")
                        all_successful = False
                else:
                    execution_results.append(f"üîç [DRY RUN] {task.title}: Simulation r√©ussie")
                    logger.info(f"üîç [DRY RUN] T√¢che simul√©e: {task.title}")
                    
            except Exception as e:
                error_msg = f"Erreur lors de l'ex√©cution de '{task.title}': {str(e)}"
                execution_results.append(f"‚ùå {task.title}: {error_msg}")
                logger.error(error_msg)
                all_successful = False
        
        status_msg = "Toutes les t√¢ches ex√©cut√©es avec succ√®s" if all_successful else "Certaines t√¢ches ont √©chou√©"
        logger.info(f"{'[DRY RUN] ' if dry_run else ''}{status_msg}")
        
        return all_successful, execution_results
    
    def _execute_single_task(self, task: TaskStatus, day: int) -> Tuple[bool, str]:
        """Ex√©cute une t√¢che individuelle selon son type"""
        task_title = task.title.lower()
        
        # Classification et ex√©cution selon le type de t√¢che
        if any(keyword in task_title for keyword in ['test', 'tester', 'v√©rifier']):
            return self._execute_test_task(task, day)
        elif any(keyword in task_title for keyword in ['cr√©er', 'd√©velopper', 'impl√©menter', 'coder']):
            return self._execute_development_task(task, day)
        elif any(keyword in task_title for keyword in ['configurer', 'installer', 'setup']):
            return self._execute_configuration_task(task, day)
        elif any(keyword in task_title for keyword in ['documenter', 'r√©diger', '√©crire']):
            return self._execute_documentation_task(task, day)
        elif any(keyword in task_title for keyword in ['optimiser', 'am√©liorer', 'refactorer']):
            return self._execute_optimization_task(task, day)
        else:
            return self._execute_generic_task(task, day)
    
    def _execute_test_task(self, task: TaskStatus, day: int) -> Tuple[bool, str]:
        """Ex√©cute une t√¢che de test"""
        try:
            # Identification des tests √† ex√©cuter
            if 'scraper' in task.title.lower():
                if 'zealy' in task.title.lower():
                    result = subprocess.run(['python', '-m', 'pytest', 'scrapers/zealy/tests/', '-v'], 
                                          capture_output=True, text=True, cwd=self.project_root)
                elif 'galxe' in task.title.lower():
                    result = subprocess.run(['python', '-m', 'pytest', 'scrapers/galxe/tests/', '-v'], 
                                          capture_output=True, text=True, cwd=self.project_root)
                else:
                    result = subprocess.run(['python', '-m', 'pytest', 'scrapers/', '-v'], 
                                          capture_output=True, text=True, cwd=self.project_root)
            elif 'pipeline' in task.title.lower():
                result = subprocess.run(['python', '-m', 'pytest', 'src/pipeline/tests/', '-v'], 
                                      capture_output=True, text=True, cwd=self.project_root)
            else:
                # Test g√©n√©rique
                result = subprocess.run(['python', '-m', 'pytest', '-v'], 
                                      capture_output=True, text=True, cwd=self.project_root)
            
            if result.returncode == 0:
                return True, f"Tests r√©ussis. Output: {result.stdout[:200]}..."
            else:
                return False, f"Tests √©chou√©s. Error: {result.stderr[:200]}..."
                
        except Exception as e:
            return False, f"Erreur lors de l'ex√©cution des tests: {str(e)}"
    
    def _execute_development_task(self, task: TaskStatus, day: int) -> Tuple[bool, str]:
        """Ex√©cute une t√¢che de d√©veloppement"""
        # Pour les t√¢ches de d√©veloppement, on v√©rifie que les fichiers/composants existent
        try:
            task_lower = task.title.lower()
            
            if 'scraper' in task_lower:
                # V√©rification de l'existence des scrapers
                scrapers_dir = self.project_root / 'scrapers'
                if scrapers_dir.exists() and any(scrapers_dir.iterdir()):
                    return True, "Scrapers d√©velopp√©s et pr√©sents"
                else:
                    return False, "Scrapers manquants ou vides"
                    
            elif 'pipeline' in task_lower:
                # V√©rification du pipeline
                pipeline_file = self.project_root / 'src' / 'pipeline' / 'main.py'
                if pipeline_file.exists():
                    return True, "Pipeline d√©velopp√© et pr√©sent"
                else:
                    return False, "Fichier pipeline manquant"
                    
            elif 'api' in task_lower:
                # V√©rification de l'API
                api_dir = self.project_root / 'src' / 'api'
                if api_dir.exists() and any(api_dir.iterdir()):
                    return True, "API d√©velopp√©e et pr√©sente"
                else:
                    return False, "API manquante ou vide"
                    
            else:
                # T√¢che de d√©veloppement g√©n√©rique - v√©rifier la structure g√©n√©rale
                essential_dirs = ['src', 'scrapers']
                missing_dirs = [d for d in essential_dirs if not (self.project_root / d).exists()]
                
                if not missing_dirs:
                    return True, "Structure de d√©veloppement pr√©sente"
                else:
                    return False, f"R√©pertoires manquants: {missing_dirs}"
                    
        except Exception as e:
            return False, f"Erreur lors de la v√©rification du d√©veloppement: {str(e)}"
    
    def _execute_configuration_task(self, task: TaskStatus, day: int) -> Tuple[bool, str]:
        """Ex√©cute une t√¢che de configuration"""
        try:
            task_lower = task.title.lower()
            
            if 'vault' in task_lower:
                # V√©rification de Vault
                vault_config = self.project_root / '.env'
                if vault_config.exists():
                    # Test de connectivit√© Vault
                    result = subprocess.run(['docker', 'ps', '--filter', 'name=vault'], 
                                          capture_output=True, text=True)
                    if 'vault' in result.stdout:
                        return True, "Vault configur√© et fonctionnel"
                    else:
                        return False, "Vault configur√© mais non d√©marr√©"
                else:
                    return False, "Configuration Vault manquante"
                    
            elif 'docker' in task_lower:
                # V√©rification Docker
                dockerfile = self.project_root / 'Dockerfile'
                docker_compose = self.project_root / 'docker-compose.yml'
                
                if dockerfile.exists() or docker_compose.exists():
                    return True, "Configuration Docker pr√©sente"
                else:
                    return False, "Fichiers Docker manquants"
                    
            elif 'env' in task_lower or 'environment' in task_lower:
                # V√©rification de l'environnement
                env_files = ['.env', 'requirements.txt', 'pyproject.toml']
                existing_files = [f for f in env_files if (self.project_root / f).exists()]
                
                if existing_files:
                    return True, f"Environnement configur√©: {existing_files}"
                else:
                    return False, "Fichiers d'environnement manquants"
                    
            else:
                return True, "Configuration g√©n√©rique valid√©e"
                
        except Exception as e:
            return False, f"Erreur lors de la v√©rification de configuration: {str(e)}"
    
    def _execute_documentation_task(self, task: TaskStatus, day: int) -> Tuple[bool, str]:
        """Ex√©cute une t√¢che de documentation"""
        try:
            # V√©rification de la pr√©sence de documentation
            doc_files = ['README.md', 'status.md', 'roadmap.md', 'task_journal.md']
            existing_docs = [f for f in doc_files if (self.project_root / f).exists()]
            
            if len(existing_docs) >= 3:  # Au moins 3 fichiers de doc essentiels
                return True, f"Documentation pr√©sente: {existing_docs}"
            else:
                return False, f"Documentation insuffisante. Pr√©sent: {existing_docs}"
                
        except Exception as e:
            return False, f"Erreur lors de la v√©rification de documentation: {str(e)}"
    
    def _execute_optimization_task(self, task: TaskStatus, day: int) -> Tuple[bool, str]:
        """Ex√©cute une t√¢che d'optimisation"""
        try:
            # Pour les t√¢ches d'optimisation, on v√©rifie la qualit√© du code
            python_files = list(self.project_root.rglob("*.py"))
            
            if python_files:
                # Test syntaxique basique
                syntax_errors = 0
                for py_file in python_files[:10]:  # Limiter √† 10 fichiers pour √©viter la surcharge
                    try:
                        compile(py_file.read_text(encoding='utf-8'), py_file, 'exec')
                    except SyntaxError:
                        syntax_errors += 1
                
                if syntax_errors == 0:
                    return True, f"Code Python syntaxiquement correct ({len(python_files)} fichiers v√©rifi√©s)"
                else:
                    return False, f"{syntax_errors} erreurs de syntaxe d√©tect√©es"
            else:
                return False, "Aucun fichier Python trouv√© pour optimisation"
                
        except Exception as e:
            return False, f"Erreur lors de l'optimisation: {str(e)}"
    
    def _execute_generic_task(self, task: TaskStatus, day: int) -> Tuple[bool, str]:
        """Ex√©cute une t√¢che g√©n√©rique"""
        # Pour les t√¢ches g√©n√©riques, on fait une validation basique de l'√©tat du projet
        try:
            essential_items = {
                'README.md': (self.project_root / 'README.md').exists(),
                'src directory': (self.project_root / 'src').exists(),
                'scrapers directory': (self.project_root / 'scrapers').exists(),
                'status.md': (self.project_root / 'status.md').exists()
            }
            
            missing_items = [item for item, exists in essential_items.items() if not exists]
            
            if not missing_items:
                return True, "Structure de projet valide"
            else:
                return False, f"√âl√©ments manquants: {missing_items}"
                
        except Exception as e:
            return False, f"Erreur lors de la validation g√©n√©rique: {str(e)}"
    
    def update_status(self, new_day: int, completion_results: List[str], dry_run: bool = False) -> bool:
        """Met √† jour le fichier status.md"""
        logger.info(f"{'[DRY RUN] ' if dry_run else ''}Mise √† jour du statut vers le jour {new_day}...")
        
        if dry_run:
            logger.info("[DRY RUN] Simulation de mise √† jour du statut")
            return True
        
        try:
            # Lecture du statut actuel
            content = self.status_file.read_text(encoding='utf-8')
            
            # Calcul des nouvelles m√©triques
            total_days = 23
            completion_percentage = (new_day - 1) / total_days * 100
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Mise √† jour des patterns
            content = re.sub(r'Jour actuel\s*:\s*\d+', f'Jour actuel : {new_day}', content)
            content = re.sub(r'Avancement\s*:\s*\d+(?:\.\d+)?%', f'Avancement : {completion_percentage:.1f}%', content)
            content = re.sub(r'Derni√®re mise √† jour\s*:\s*.+', f'Derni√®re mise √† jour : {current_date}', content)
            
            # Ajout d'une section de r√©sultats si elle n'existe pas
            if "## Derni√®res t√¢ches accomplies" not in content:
                content += f"\n\n## Derni√®res t√¢ches accomplies\n\n"
            
            # Ajout des r√©sultats de completion
            results_section = f"### Jour {new_day-1} - Termin√© le {current_date}\n\n"
            for result in completion_results:
                results_section += f"{result}\n"
            results_section += "\n"
            
            content = content.replace("## Derni√®res t√¢ches accomplies\n\n", 
                                    f"## Derni√®res t√¢ches accomplies\n\n{results_section}")
            
            # √âcriture du fichier mis √† jour
            self.status_file.write_text(content, encoding='utf-8')
            logger.info(f"‚úÖ Statut mis √† jour: jour {new_day}, {completion_percentage:.1f}% compl√©t√©")
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du statut: {str(e)}")
            return False
    
    def commit_and_push(self, day: int, completion_results: List[str], dry_run: bool = False) -> bool:
        """Effectue un commit Git et pousse les modifications"""
        logger.info(f"{'[DRY RUN] ' if dry_run else ''}Commit et push des modifications...")
        
        if dry_run:
            logger.info("[DRY RUN] Simulation du commit Git")
            return True
        
        try:
            # Pr√©paration du message de commit
            commit_message = f"Jour {day-1} termin√© - Progression automatis√©e\n\n"
            commit_message += f"T√¢ches accomplies:\n"
            for result in completion_results:
                commit_message += f"- {result}\n"
            commit_message += f"\nAvancement: {((day-1)/23)*100:.1f}% - Jour {day}/23"
            
            # Ajout des fichiers modifi√©s
            subprocess.run(['git', 'add', '.'], cwd=self.project_root, check=True)
            
            # Commit
            subprocess.run(['git', 'commit', '-m', commit_message], 
                         cwd=self.project_root, check=True)
            
            # Push (en g√©rant les erreurs de r√©seau)
            try:
                subprocess.run(['git', 'push'], cwd=self.project_root, check=True)
                logger.info("‚úÖ Modifications pouss√©es sur GitHub avec succ√®s")
            except subprocess.CalledProcessError:
                logger.warning("‚ö†Ô∏è Impossible de pousser sur GitHub (r√©seau/auth), commit local effectu√©")
            
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"Erreur lors du commit/push: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"Erreur inattendue lors du commit/push: {str(e)}")
            return False
    
    def save_execution_log(self, day: int, results: List[str], success: bool):
        """Sauvegarde un log d√©taill√© de l'ex√©cution"""
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'day': day,
            'success': success,
            'results': results,
            'execution_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # Chargement du log existant ou cr√©ation
        if self.execution_log.exists():
            try:
                existing_log = json.loads(self.execution_log.read_text(encoding='utf-8'))
            except:
                existing_log = []
        else:
            existing_log = []
        
        existing_log.append(log_entry)
        
        # Limitation √† 50 entr√©es maximum
        if len(existing_log) > 50:
            existing_log = existing_log[-50:]
        
        # Sauvegarde
        self.execution_log.write_text(json.dumps(existing_log, indent=2, ensure_ascii=False), 
                                    encoding='utf-8')
    
    def run_automated_cycle(self, dry_run: bool = False) -> bool:
        """Ex√©cute un cycle complet automatis√©"""
        logger.info("üöÄ D√©marrage du cycle automatis√© de gestion des t√¢ches")
        
        try:
            # 1. Chargement du statut actuel
            current_status = self.load_current_status()
            logger.info(f"üìä Statut actuel: Jour {current_status.current_day}/{current_status.total_days}")
            
            # 2. Validation que le jour courant est termin√©
            if current_status.current_day > 1:
                is_complete, completion_message = self.validate_current_day_completion(current_status.current_day - 1)
                if not is_complete:
                    logger.warning(f"‚ö†Ô∏è Jour pr√©c√©dent non termin√©: {completion_message}")
                    return False
            
            # 3. V√©rification qu'il y a encore des jours √† traiter
            if current_status.current_day > current_status.total_days:
                logger.info("üéâ Projet termin√© ! Tous les jours ont √©t√© compl√©t√©s.")
                return True
            
            # 4. R√©cup√©ration des t√¢ches du jour courant
            current_day_tasks = self.get_next_day_tasks(current_status.current_day)
            logger.info(f"üìã {len(current_day_tasks)} t√¢ches √† ex√©cuter pour le jour {current_status.current_day}")
            
            # 5. Ex√©cution des t√¢ches
            success, results = self.execute_day_tasks(current_status.current_day, current_day_tasks, dry_run)
            
            if not success:
                logger.error("‚ùå √âchec de l'ex√©cution des t√¢ches")
                self.save_execution_log(current_status.current_day, results, False)
                return False
            
            # 6. Mise √† jour du statut
            next_day = current_status.current_day + 1
            if not self.update_status(next_day, results, dry_run):
                logger.error("‚ùå √âchec de la mise √† jour du statut")
                return False
            
            # 7. Commit et push
            if not self.commit_and_push(next_day, results, dry_run):
                logger.error("‚ùå √âchec du commit/push")
                return False
            
            # 8. Sauvegarde du log d'ex√©cution
            self.save_execution_log(current_status.current_day, results, True)
            
            logger.info(f"‚úÖ Jour {current_status.current_day} termin√© avec succ√®s !")
            logger.info(f"üìà Progression: {((next_day-1)/current_status.total_days)*100:.1f}%")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur critique dans le cycle automatis√©: {str(e)}")
            return False
    
    # M√©thodes utilitaires
    def _extract_pattern(self, content: str, pattern: str, cast_type: type, default: Any) -> Any:
        """Extrait un pattern du contenu avec cast et valeur par d√©faut"""
        match = re.search(pattern, content, re.MULTILINE | re.IGNORECASE)
        if match:
            try:
                return cast_type(match.group(1))
            except (ValueError, TypeError):
                return default
        return default
    
    def _extract_day_tasks(self, content: str, day: int) -> List[TaskStatus]:
        """Extrait les t√¢ches d'un jour sp√©cifique du journal"""
        lines = content.split('\n')
        tasks = []
        in_day_section = False
        current_date = ""
        
        for line in lines:
            # D√©tection du header du jour
            day_match = re.match(self.journal_patterns['day_header'], line)
            if day_match:
                if int(day_match.group(1)) == day:
                    in_day_section = True
                    current_date = day_match.group(2)
                else:
                    in_day_section = False
                continue
            
            # Si on est dans la section du bon jour
            if in_day_section:
                # D√©tection d'une nouvelle section de jour (fin de la section courante)
                if line.startswith('## Jour') and not line.startswith(f'## Jour {day}'):
                    break
                
                # Extraction des t√¢ches
                task_match = re.match(self.journal_patterns['task_item'], line)
                if task_match:
                    completed = task_match.group(1) == 'x'
                    title = task_match.group(2)
                    
                    # Nettoyage du titre (suppression des marqueurs de completion)
                    title = re.sub(r'\s*‚úÖ.*$', '', title)
                    title = re.sub(r'\s*üîç.*$', '', title)
                    
                    task = TaskStatus(
                        day=day,
                        date=current_date,
                        title=title.strip(),
                        completed=completed
                    )
                    tasks.append(task)
        
        return tasks

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description='Task Manager - Gestionnaire automatis√© des t√¢ches')
    parser.add_argument('--dry-run', action='store_true', 
                       help='Ex√©cute en mode simulation sans modifications r√©elles')
    parser.add_argument('--verbose', action='store_true', 
                       help='Active le mode verbose pour plus de d√©tails')
    parser.add_argument('--project-root', default='.', 
                       help='Chemin vers la racine du projet')
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Cr√©ation et ex√©cution du gestionnaire de t√¢ches
    task_manager = TaskManager(args.project_root)
    
    try:
        success = task_manager.run_automated_cycle(dry_run=args.dry_run)
        
        if success:
            logger.info("üéâ Cycle automatis√© termin√© avec succ√®s !")
            sys.exit(0)
        else:
            logger.error("‚ùå √âchec du cycle automatis√©")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        logger.error(f"üí• Erreur fatale: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
