#!/usr/bin/env python3
"""
Test simplifi√© pour v√©rifier si le fix Galxe fonctionne
"""

import sys
import os
import json
from datetime import datetime

# Add path for imports
sys.path.insert(0, os.path.abspath('.'))

try:
    import requests
    from bs4 import BeautifulSoup
    
    print("‚úÖ Imports r√©ussis")
    
    # Test avec une requ√™te simple d'abord
    print("\nüîÑ Test de base avec Galxe...")
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
    }
    
    try:
        response = requests.get("https://galxe.com/explore", headers=headers, timeout=30)
        print(f"‚úÖ Requ√™te r√©ussie: {response.status_code}, {len(response.text)} caract√®res")
        
        # Test du parsing
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # V√©rifier si la structure grid existe
        grid_container = soup.select_one("div.GridFlowContainer_grid-flow__m_iqK")
        if grid_container:
            print(f"‚úÖ Container grid trouv√©")
            child_count = len(grid_container.find_all())
            print(f"üìä √âl√©ments enfants dans le grid: {child_count}")
        else:
            print("‚ùå Container grid non trouv√©")
        
        # Tester les s√©lecteurs de la nouvelle logique
        selectors_to_test = [
            "div.GridFlowContainer_grid-flow__m_iqK > div",
            "div.GridFlowContainer_grid-flow__m_iqK > *", 
            "a[href*='/space/']",
            "a[href*='/quest/']",
            "main a[href]"
        ]
        
        results = {}
        for selector in selectors_to_test:
            items = soup.select(selector)
            results[selector] = len(items)
            if len(items) > 0:
                print(f"‚úÖ {selector}: {len(items)} √©l√©ments trouv√©s")
            else:
                print(f"‚ùå {selector}: aucun √©l√©ment")
        
        # R√©sum√© du diagnostic
        print(f"\nüìä DIAGNOSTIC:")
        print(f"- Container grid pr√©sent: {'‚úÖ' if grid_container else '‚ùå'}")
        print(f"- Total s√©lecteurs test√©s: {len(selectors_to_test)}")
        print(f"- S√©lecteurs avec r√©sultats: {sum(1 for count in results.values() if count > 0)}")
        
        # Si aucun lien /space/ n'est trouv√©, c'est normal - contenu dynamique
        space_links = results.get("a[href*='/space/']", 0)
        if space_links == 0:
            print("‚ö†Ô∏è  Aucun lien /space/ trouv√© - NORMAL, contenu charg√© dynamiquement")
            print("üîß Solution: utiliser ScraperAPI avec wait_for ou Playwright")
        
        # Sauvegarder le r√©sultat pour r√©f√©rence
        diagnostic_result = {
            "timestamp": datetime.now().isoformat(),
            "status": "success",
            "grid_container_found": grid_container is not None,
            "selector_results": results,
            "recommendation": "Use ScraperAPI with wait_for parameter or Playwright for dynamic content"
        }
        
        with open("galxe_diagnostic.json", "w", encoding='utf-8') as f:
            json.dump(diagnostic_result, f, indent=2, ensure_ascii=False)
        
        print("üíæ R√©sultats sauvegard√©s dans galxe_diagnostic.json")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("V√©rifiez que l'environnement virtuel est activ√© et que les d√©pendances sont install√©es")
